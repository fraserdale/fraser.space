1.0    declare canvas as rush element
1.1    declare context as canas context
1.2    scale context by 20

2.0    declare colours as array = 'orange','yellow','red','lime','blue','purple','cyan'
2.1    declare shapes as array =
2.1.1                                   [0,0,0]
2.1.2                                   [0,0,1]
2.1.3                                   [1,1,1]
2.1.4
2.1.5                                   [1,0,0]
2.1.6                                   [1,0,0]
2.1.7                                   [1,1,0]
2.1.8
2.1.9                                   [1,1,1]
2.1.10                                  [1,0,0]
2.1.11                                  [0,0,0]
2.1.12
2.1.13                                  [0,1,1]
2.1.14                                  [0,0,1]
2.1.15                                  [0,0,1]
2.1.16
2.1.17
2.1.18                                  [0,0,0]
2.1.19                                  [0,1,1]
2.1.20                                  [0,1,1]
2.1.21
2.1.22                                  [0,0,0]
2.1.23                                  [0,1,1]
2.1.24                                  [0,1,1]
2.1.25
2.1.26                                  [0,0,0]
2.1.27                                  [0,1,1]
2.1.28                                  [0,1,1]
2.1.29
2.1.30                                  [0,0,0]
2.1.31                                  [0,1,1]
2.1.32                                  [0,1,1]
2.1.33
2.1.34
2.1.35                                  [0,0,0]
2.1.36                                  [1,1,0]
2.1.37                                  [0,1,1]
2.1.38
2.1.39                                  [0,0,1]
2.1.40                                  [0,1,1]
2.1.41                                  [0,1,0]
2.1.42
2.1.42                                  [0,0,0]
2.1.43                                  [1,1,0]
2.1.44                                  [0,1,1]
2.1.45
2.1.46                                  [0,0,1]
2.1.47                                  [0,1,1]
2.1.48                                  [0,1,0]
2.1.49
2.1.50
2.1.51                                  [0,0,0]
2.1.52                                  [0,1,1]
2.1.53                                  [1,1,0]
2.1.54
2.1.55                                  [1,0,0]
2.1.56                                  [1,1,0]
2.1.57                                  [0,1,0]
2.1.58
2.1.59                                  [0,0,0]
2.1.60                                  [0,1,1]
2.1.61                                  [1,1,0]
2.1.62
2.1.63                                  [1,0,0]
2.1.64                                  [1,1,0]
2.1.65                                  [0,1,0]
2.1.66
2.1.67
2.1.68                                  [0,0,0]
2.1.69                                  [1,0,0]
2.1.70                                  [1,1,1]
2.1.71
2.1.72                                  [1,1,0]
2.1.73                                  [1,0,0]
2.1.74                                  [1,0,0]
2.1.75
2.1.76                                  [1,1,1]
2.1.77                                  [0,0,1]
2.1.78                                  [0,0,0]
2.1.79
2.1.80                                  [0,0,1]
2.1.90                                  [0,0,1]
2.1.91                                  [0,1,1]
2.1.92
2.1.93
2.1.94                                  [0,0,0]
2.1.95                                  [0,1,0]
2.1.96                                  [1,1,1]
2.1.97
2.1.98                                  [1,0,0]
2.1.99                                  [1,1,0]
2.1.100                                 [1,0,0]
2.1.101
2.1.102                                 [1,1,1]
2.1.103                                 [0,1,0]
2.1.104                                 [0,0,0]
2.1.105
2.1.106                                 [0,0,1]
2.1.107                                 [0,1,1]
2.1.108                                 [0,0,1]

##reads in the cookies and splits to get only the numbers
3.0    declare allcookies as all document cookies
3.1    declare splitcookie as allcookies split by '='
3.2    declare scores as allcookies(1)

##initialises the score (score), the shape counter (n) and the rotation counter (counter)
4.0    declare score as 0
4.1    declare shapeCount = 0
4.2    declare counter = 0

##create object to store the current shape, the one that is dropping
5.0    declare current as object
5.1        shape = shapes(n)
5.2        colour = colours(0)
5.3        position{x = 5, y = -2}

##generate the saved shapes array
6.0    declare saved as array
6.1    loop through outer from 0 to 20
6.2        loop through inner from 0 to 12
6.3            saved(outer,inner) = 0
6.4        next loop
6.5    next loop

##function to draw current shape
7.0    draw()
7.1        loop through each row of the shape
7.2            loop through each element in the row
7.3                if at that index shape[row,element] = 1
7.4                    fill 1x1 box of current.colour on the canvas context
7.5               end if
7.6            next loop
7.7        next loop

##function to draw all saved shapes
8.0    drawSaved()
8.1        loop through outer from 0 to 20
8.2            loop through inner from 0 to 12
8.3                if saved[outer,inner] = 1
8.4                   fill 1x1 box of current.colour on the canvas context
8.5                end if
8.6            next loop
8.7        next loop

##draw shape to back array
9.0    drawBack()
9.1        loop through each row of the shape
9.2            loop through each element in the row
9.3                if at that index shape[row,element] = 1
9.4                    saved[row,element] = 1
9.5                end if
9.6            next loop
9.7        next loop


##fill function
10.0    fill()
10.1        set background colour of the context to #232323
10.2        set context size so the size of the canvas
10.3        draw()
10.4        drawSaved()


11.0    start timer to call function every 1000ms

##function to drop the tile by one
12.0    drop()
12.1        if any of the top row already has value filled
12.2            stop drop timer
12.3            hide all elements on page
12.4            open gameover page
12.5        else if touching bottom of canvas
12.6            collision()
12.7        else
12.8            current.position.y = current.position.y + 1
12.9        end if

##bubble sort algorithm
13.0     sort()
13.1         push current score to scores array
13.2         do
13.3             swap = false
13.4             loop x through the scores array
13.5                 if scores[x] > scores[x+1]
13.6                     declare temp as scores[x]
13.7                     scores[x] = scores[x+1];
13.8                     scores[x+1] = temp
13.9                     swap = true
13.10                end if
13.11            next loop
13.12        while swap = true
13.13        ##remove smallest array value
13.14        shift first value off array
13.15        write cookie with new scores array

##function to handle when a collision occurs
14.0    collision()
14.1        drawBack(current.shape)
14.2        current.position.x = -2
14.3        current.position.y = 5
14.4
14.5        declare random as random number between 0 - 6
14.6        set shapeCount = random * 4
14.7        current.shape = shapes[shapeCount]
14.8        current.colour = colours[random]
14.9        counter = 0

##function to check if a collision will happen when moved left
15.0     checkLeft()
15.1         if current.position.x <= 0
15.2             return false
15.3         end if
15.4
15.5         canLeft = true
15.6         loop through each row of the shape
15.7             loop through each element in the row
15.8                 if at that index shape[row,element] = 1
15.9                     if saved[row,element - 1] = 1
15.11                        canLeft = false
15.12                    end if
15.13                end if
15.14            next loop
15.15        next loop
15.16
15.17        if canLeft = true
15.18            return true
15.19        else
15.20            return false
15.21        end if

##function to check if a collision will happen when moved right
16.0     checkRight()
16.1         if current.position.x <= 0
16.2             return false
16.3         end if
16.4
16.5         canRight = true
16.6         loop through each row of the shape
16.7             loop through each element in the row
16.8                 if at that index shape[row,element] = 1
16.9                     if saved[row,element + 1] = 1
16.10                        canRight = false
16.11                    end if
16.12                end if
16.13            next loop
16.14        next loop
16.15
16.16        if canRight = true
16.17            return true
16.18        else
16.19            return false
16.20        end if

##function to check if a collision will happen if rotated
17.0     checkRotate()
17.1         if counter < 3
17.2             next = shapes[n+1]
17.3         else
17.4             next = shapes[n-3]
17.5         end if
17.6
17.7         rotatable = true
17.8         loop through each row of the shape
17.9             loop through each element in the row
17.10                if at that index shape[row,element] = 1
17.11                    if saved[row,element] = 1
17.12                        rotatable = false
17.13                    end if
17.14                end if
17.15            next loop
17.16        next loop
17.17
17.18        if rotatable = true
17.19                return true
17.20        else
17.21            return false
17.22        end if

##keypress handling
18.0     if keypress = 'a'
18.1         if checkLeft() = true
18.2             current.position.x = current.position.x - 1
18.3             fill()
18.4         end if
18.5     else if keypress = 'd'
18.6         if checkRight() = true
18.7             current.position.x = current.position.x + 1
18.8             fill()
18.9         end if
18.10    else if keypress = 's'
18.11        drop()
18.12        fill()
18.13    else if keypress = 'w'
18.14        if checkRotate() = true
18.15            if counter < 3
18.16                shapeCount = shapeCounter + 1
18.17                counter = counter + 1
18.18            else
18.19                shapeCount = 0
18.20                counter = counter - 3
18.21            end if
18.22            fill()
18.23        end if
18.24    end if
